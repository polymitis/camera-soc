// Project   : VGA
// Details   : VGA driver (60Hz, 640x480) testbench.
`ifndef M_VGADRIVER_SVT
`define M_VGADRIVER_SVT

`define TEST

`include "I_FrameTransfer.sv"
`include "M_VgaDriver.sv"

// assert macro
`define ASSERT(__cond) assert (__cond) else $fatal(2,`"(__cond)`")

// VgaDriver testbench top module
module t_tMVgaDriver;
    timeunit 1ns;
    timeprecision 1ps;
    
    localparam time SYS_CLOCK_PERIOD = 20ns; // 50 MHz
    localparam time PLL_CLOCK_PERIOD = 39.722ns; // 25.175 MHz
    
    // System clock
    bit sb1SysClock;
    always #(SYS_CLOCK_PERIOD/2) sb1SysClock <= ~sb1SysClock;
    
    // Pll clock 
    bit sb1PllClock;
    always #(PLL_CLOCK_PERIOD/2) sb1PllClock <= ~sb1PllClock;
    
    // VGA output interface
    tIVgaOut iIVgaOut(sb1PllClock);
    
    // Frame transfer bus
    tIFrameTransfer iIFrameTransfer(sb1SysClock);
    
    // VGA driver
    tMVgaDriver iMVgaDriver 
    ( // Ports:
        .pIVgaOut       (iIVgaOut),
        .pIFrameIn      (iIFrameTransfer)
    );
    
    t_tMTransactor iMTransactor
    ( // Ports:
        .pIVgaOut       (iIVgaOut),
        .pIFrameIn      (iIFrameTransfer)
    );
    
endmodule : t_tMVgaDriver

// Transactor
module t_tMTransactor 
( // Ports:
    tIVgaOut.t_driver       pIVgaOut,
    tIFrameTransfer.t_src   pIFrameIn
);
    timeunit 1ns;
    timeprecision 1ps;
    
    // bit A, B;
    
    initial 
    begin : Main
        // A <= 1'b1;
        // B <= 1'b1;
        
        // reset VGA output interface
        pIVgaOut.cb.ul1Reset_n <= 1'b0;
        repeat (3) @pIVgaOut.cb;
        pIVgaOut.cb.ul1Reset_n <= 1'b1;
        
        // reset Frame transfer bus interface
        pIFrameIn.cb_src.ul1Reset_n <= 1'b0;
        repeat (3) @pIFrameIn.cb_src;
        pIFrameIn.cb_src.ul1Reset_n <= 1'b1;
        
        // B <= 1'b0;
        // @pIVgaOut.cb;
        // a1: `ASSERT(A == B);
        
        repeat (875000) @pIVgaOut.cb; // (35 ms) 2 frames duration
        
        $finish;

    end : Main

endmodule : t_tMTransactor

`endif//M_VGADRIVER_SVT
