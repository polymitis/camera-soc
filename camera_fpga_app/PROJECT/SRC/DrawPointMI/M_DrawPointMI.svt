// Project   : Camera FPGA
// Details   : DrawPoint master interface testbench.
`ifndef M_DRAWPOINTMI_SVT
`define M_DRAWPOINTMI_SVT

`define TEST

`include "../I_DrawPoint.sv"
`include "DrawPointMI_sim/simulation/DrawPointMI_sim.v"

// assert macro
`define ASSERT(__cond) assert (__cond) else $fatal(2,`"(__cond)`")

// Avalon MM BFM
import avalon_mm_pkg::*;
`define AVM_BFM $root.tMDrawPointMI_tb.iDrawPointMI_sim.avm_bfm

// VgaDriver testbench top module
module tMDrawPointMI_tb;
    timeunit 1ns;
    timeprecision 1ps;
    
    localparam time SYS_CLOCK_PERIOD = 20ns; // 50 MHz      
    
    // System clock
    bit sb1SysClock;
    always #(SYS_CLOCK_PERIOD/2) sb1SysClock <= ~sb1SysClock;
    
    // System reset
    bit ul1SysReset_n;      
    
    // DrawPoint master clock
    bit sb1DpmClock;
    
    // DrawPoint master interface
    tIDrawPoint iIDrawPoint(sb1DpmClock);
    
    // DrawPoint master interface simulation model instance
    DrawPointMI_sim iDrawPointMI_sim 
    ( // Ports:
        .clk_clk                           (sb1SysClock),                        
        .drawpoint_dpm_dpm_ul1reset_n      (iIDrawPoint.ul1Reset_n),   
        .drawpoint_dpm_dpm_ul1update       (iIDrawPoint.ul1Update),    
        .drawpoint_dpm_dpm_ul9posx         (iIDrawPoint.ul9PosX),      
        .drawpoint_dpm_dpm_ul9posy         (iIDrawPoint.ul9PosY),      
        .drawpoint_dpm_dpm_ul12rgb12data   (iIDrawPoint.ul12Rgb12Data),
        .drawpoint_dpm_dpm_ul1clock        (sb1DpmClock),     
        .reset_reset_n                     (ul1SysReset_n) 
    );
    
    tMDrawPointMI_trn iMDrawPointMI_trn
    ( // Ports:
        .clk_clk       (sb1SysClock),    
        .reset_reset_n (ul1SysReset_n),  
        .pIDrawPoint   (iIDrawPoint)                   
    );
    
endmodule : tMDrawPointMI_tb

// Transactor
module tMDrawPointMI_trn 
( // Ports:  
    input  bit         clk_clk,
    output bit         reset_reset_n,  
    tIDrawPoint.tb_mst pIDrawPoint  
);
    timeunit 1ns;
    timeprecision 1ps;
    
    //bit A, B;
    
    default clocking tb_cb @ (posedge clk_clk);
        output #1 reset_reset_n; 
    endclocking
    
    initial 
    begin : Main
        
        // init all outputs
        reset_reset_n = 1'b0;
        
        // reset draw point interface
        ##1 tb_cb.reset_reset_n <= 1'b0;
        ##1 tb_cb.reset_reset_n <= 1'b1;
        
        ##10 `AVM_BFM.init();
        
        // Read Major version
        `AVM_BFM.set_command_address(16'h0000);
        `AVM_BFM.set_command_burst_count(10'b0000000001);
        `AVM_BFM.set_command_burst_size(10'b0000000001);
        `AVM_BFM.set_command_byte_enable(2'b11,0);
        `AVM_BFM.set_command_request(REQ_READ);
        `AVM_BFM.push_command();
        
        ##2 `AVM_BFM.pop_response();
        a1: `ASSERT(`AVM_BFM.get_response_data(0) == 16'h00FF);
        
        // Read Minor version
        `AVM_BFM.set_command_address(16'h0001);
        `AVM_BFM.set_command_burst_count(10'b0000000001);
        `AVM_BFM.set_command_burst_size(10'b0000000001);
        `AVM_BFM.set_command_byte_enable(2'b11,0);
        `AVM_BFM.set_command_request(REQ_READ);
        `AVM_BFM.push_command();
        
        ##2 `AVM_BFM.pop_response();
        a2: `ASSERT(`AVM_BFM.get_response_data(0) == 16'h0000);
        
        // Read revision number
        `AVM_BFM.set_command_address(16'h0002);
        `AVM_BFM.set_command_burst_count(10'b0000000001);
        `AVM_BFM.set_command_burst_size(10'b0000000001);
        `AVM_BFM.set_command_byte_enable(2'b11,0);
        `AVM_BFM.set_command_request(REQ_READ);
        `AVM_BFM.push_command();
        
        ##2 `AVM_BFM.pop_response();
        a3: `ASSERT(`AVM_BFM.get_response_data(0) == 16'h0000);
        
        // Read build number
        `AVM_BFM.set_command_address(16'h0003);
        `AVM_BFM.set_command_burst_count(10'b0000000001);
        `AVM_BFM.set_command_burst_size(10'b0000000001);
        `AVM_BFM.set_command_byte_enable(2'b11,0);
        `AVM_BFM.set_command_request(REQ_READ);
        `AVM_BFM.push_command();
        
        ##2 `AVM_BFM.pop_response();
        a4: `ASSERT(`AVM_BFM.get_response_data(0) == 16'h0001);
        
        // Read burst version Major.Minor.Revision.Build
        `AVM_BFM.set_command_address(16'h0000);
        `AVM_BFM.set_command_burst_count(10'b0000000100);
        `AVM_BFM.set_command_burst_size(10'b0000000100);
        `AVM_BFM.set_command_request(REQ_READ);
        `AVM_BFM.push_command();
        
        ##6 `AVM_BFM.pop_response();
        a5: `ASSERT(`AVM_BFM.get_response_data(0) == 16'h00FF);
        a6: `ASSERT(`AVM_BFM.get_response_data(1) == 16'h0000);
        a7: `ASSERT(`AVM_BFM.get_response_data(2) == 16'h0000);
        a8: `ASSERT(`AVM_BFM.get_response_data(3) == 16'h0001);
        
        ##20; 
        
        //$finish; is handled by the simulation script

    end : Main

endmodule : tMDrawPointMI_trn

`endif//M_DRAWPOINTMI_SVT
